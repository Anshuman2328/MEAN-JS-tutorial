nin class 1 


<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Ninja Class I</title>
        <script type="text/javascript">
            function Ninja(name){
                this.name = name;
                this.health = 100;
                var speed = 3;
                var strength = 3;
                this.showStats = function(){
                    console.log("Name: " + this.name + ", Health: " + this.health + ", Speed: " + speed + ", Strength: " + strength);
                    return this;
                }       
            }
            Ninja.prototype.drinkSake = function(){
                this.health += 10;
                return this;
            }
            Ninja.prototype.sayName = function(){
                console.log("Hello my name is " + this.name + ".");
                return this;
            }
            var yasmeen = new Ninja("yasmeen")
            yasmeen.showStats();
            yasmeen.drinkSake();
            yasmeen.showStats();
            yasmeen.sayName();
        </script>
    </head>
    <body>
        <h1>Ninja Class I</h1>
        <p><b>Instructions:</b> Create a new class called Ninja with the following attributes:
            name,
            health,
            speed (private),
            and strength (private).
            Speed and strength should be 3 by default. Health should be 100 by default.

            The Ninja class should have the following methods:

            1.) sayName() - This should log that Ninja's name to the console.
            2.) showStats() - This should show the Ninja's Strength and Speed, as well as their health.
            3.) drinkSake() - This should add +10 Health to the Ninja.</p>
        <p>Check out the console to have fun.</p>
    </body>
</html>



nin class 2 


<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Ninja Class 2</title>
        <script type="text/javascript">
            function Ninja(name){
                this.name = name;
                this.health = 100;
                var speed = 3;
                var strength = 3;
                this.showStats = function(){
                    console.log("Name: " + this.name + ", Health: " + this.health + ", Speed: " + speed + ", Strength: " + strength);
                    return this;
                }
                this.kick = function(ninja){
                    if (ninja instanceof Ninja){
                        var damage_inflicted = strength * 15;
                        ninja.health -= damage_inflicted;
                        console.log(ninja.name + " was kicked by " + this.name + " and lost " + damage_inflicted + " health!")
                }
            }
            Ninja.prototype.drinkSake = function(){
                this.health += 10;
                return this;
            }
            Ninja.prototype.sayName = function(){
                console.log("Hello my name is " + this.name + ".");
                return this;
            }
            Ninja.prototype.punch = function(ninja){
                var victim = ninja;
                if (victim instanceof Ninja){
                    victim.health -= 5;
                    console.log(victim.name + " was punched by " + this.name + " and lost 5 health!")
                }
                else{
                    console.log("The ninja that " + this.name + " is trying to punch does not exist.")
                }
            }
        }
            var yasmeen = new Ninja("yasmeen")
            yasmeen.showStats();
            yasmeen.drinkSake();
            yasmeen.showStats();
            yasmeen.sayName();
            var isaac = new Ninja("isaac")
            yasmeen.kick(isaac);
        </script>
    </head>
    <body>
        <h1>Ninja Class II: [See Ninja Class I first]</h1>
        <p>Complete the below challenges using the Ninja Class from the previous assignment.</p>

            <p>1.) .punch():
            Add a new method to your Ninja class called .punch(). This method will take another Ninja instance and subtract 5 Health from the Ninja we passed in.</p>
            <p>2.) .kick(): Now add a method to your Ninja class called .kick(). Kick will subtract 15 Health for each point of Strength the calling Ninja has, and like .punch() will take another Ninja instance.</p>
            <p>3.) Validations: Update .punch() and .kick() so that they only accept Instances of the Ninja class. Hint: You will need to find a way to check the constructor of an instance. You will often need to consult outside documentation to find solutions for particular features.</p>
    </body>
</html>




nin class 3

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Ninja Class III</title>
        <script type="text/javascript">
            class Ninja{
                constructor(name){
                    this.name = name;
                    this.health = 100;
                    this.strength = 3;
                    this.speed = 3;
                }
                sayName(){
                    console.log(`My name is ${this.name}.`);
                }
                showStats(){
                    console.log(`Name: ${this.name}, Health: ${this.health}, Speed: ${this.speed}, Strength: ${this.strength}`);
                }
                drinkSake(){
                    this.health += 10;
                    return this;
                }
                punch(ninja){
                    if (ninja instanceof Ninja){
                        ninja.health -= 5;
                        console.log(`${ninja.name} was punched by ${this.name} and lost 5 health!`)
                    }
                    else{
                        console.log(`The ninja ${this.name} is trying to punch does not exist.`)
                    }
                }
                kick(ninja){
                    if (ninja instanceof Ninja){
                        var damage_inflicted = this.strength * 15;
                        ninja.health -= damage_inflicted;
                        console.log(`${ninja.name} was kicked by ${this.name} and lost ${damage_inflicted} health!`)
                    }
                    else{
                        console.log(`The ninja ${this.name} is trying to kick does not exist.`)
                    }
                }
            }
            class Sensei extends Ninja{
                constructor(name){
                    super(name);
                    this.health = 200;
                    this.speed = 10;
                    this.strength = 10;
                    this.wisdom = 10;
                }
                showStats(){
                    console.log(`Name: ${this.name}, Health: ${this.health}, Speed: ${this.speed}, Strength: ${this.strength}, Wisdom: ${this.wisdom}`)
                }
                speakWisdom(){
                    super.drinkSake();
                    console.log("What one programmer can do in one month, two programmers can do in two months...")
                }
            }
            var yasmeen = new Ninja("Yasmeen")
            yasmeen.showStats()
            var isaac = new Ninja("Isaac")
            yasmeen.kick(isaac)
            var will = new Sensei("Will");
            will.showStats()
            will.speakWisdom()
            will.showStats()
        </script>
    </head>
    <body>
        <h1>Ninja Class III</h1>
        <p>Part I: Recreate the base Ninja class from scratch using ES6 classes. Your Ninja needs the following attributes:</p>
        <p>- Name, Health, Speed, Strength</p>
        <p>Speed and strength should be 3 by default. Health should be 100 by default.</p>

        <p>The Ninja class should have the following methods:</p>
        <p>1. sayName() - This should log that Ninja's name to the console.</p>
        <p>2. showStats() - This should show the Ninja's Strength and Speed, as well as their health.</p>
        <p>3. drinkSake() - This should add +10 Health to the Ninja</p>

        <p>Part II - Sensei Class</p>
        <p>Extend the Ninja class and create the Sensei class. A Sensei should have 200 Health, 10 speed, and 10 strength by default. In addition, a Sensei should have a new attribute called wisdom, and the default should be 10. Finally, add the speakWisdom() method. speakWisdom() should call the drinkSake() method from the Ninja class, before console.logging a wise message.</p>
    </body>
</html>

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Deck of Cards</title>
        <script type="text/javascript">
            class Deck{
                constructor(){
                    this.cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52];
                    this.original = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52];
                }
                // A deck has 52 cards, so for this assignment,
                // an array of 52 numbers is used
                shuffle(){
                    var s = this.cards.length, t, i;
                    while (s){
                        i = Math.floor(Math.random()* s--);
                        t = this.cards[s];
                        this.cards[s] = this.cards[i];
                        this.cards[i] = t
                    }
                    console.log(this.cards);
                }
                // This shuffles the cards using Math.random and
                // Math.floor for the randomness
                reset(){
                    this.cards = this.original;
                    console.log(this.cards);
                }
                // Quickly resets the cards by setting them to their
                // original state
                deal(){
                    var rand = (Math.floor(Math.random()*this.cards.length));
                    var card_dealt = this.cards[rand]
                    this.cards.splice(rand,1);
                    return card_dealt;
                }
                // Picks a card randomly and deals it to a user
                // Gets rid of the card from the deck so it cannot
                // be dealt again
            }
            class Player{
                constructor(name){
                    this.name = name;
                    this.hand = [];
                }
                // Each player has a name and a hand
                showHand(){
                    if (this.hand.length < 1){
                        console.log(`${this.name} has no cards.`)
                    }
                    else{
                        console.log(`${this.hand}`);
                    }
                }
                // Displays the user's hand
                draw(deck){
                    var c = deck.deal();
                    console.log(`${this.name} drew ${c}.`)
                    this.hand.push(c)
                    return this;
                }
                // Draws a card randomly from a deck of choice
                // which is passed into the function and instantiates
                // the deal() method that decks have onto that deck
                discard(num){
                    if(this.hand.indexOf(num) > -1){
                        var card_discard = this.hand.indexOf(num)
                        this.hand.splice(card_discard, 1);
                        console.log(`${this.name} discarded ${num}.`)
                        return this.hand;
                    }
                    else{
                        console.log(`${this.name} does not have ${num}.`)
                        return this.hand;
                    }
                }
                // Checks if the user has the card first and then
                // gets rid of it if they do, and if not it notifies players
            }
            // Trial
            var deck1 = new Deck();
            deck1.shuffle();
            var player1 = new Player("Yasmeen");
            player1.draw(deck1);
            player1.draw(deck1);
            player1.showHand();
        </script>
    </head>
    <body>

    </body>
</html>